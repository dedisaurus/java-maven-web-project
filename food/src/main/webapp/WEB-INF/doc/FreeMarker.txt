1.if 
<#if animals.python.price == 0>
 Pythons are free today!
</#if> 

<#if animals.python.price < animals.elephant.price>
 Pythons are cheaper than elephants today.
<#else>
 Pythons are not cheaper than elephants today.
</#if> 

2.list 指令
<p>We have these animals:
<table border=1>
 <tr><th>Name<th>Price
 <#list animals as being>
 <tr><td>${being.name}<td>${being.price} Euros
 </#list>
</table>

<p>We have these animals:
<table border=1>
 <tr><th>Name<th>Price
 <#list animals as being>
 <tr>
 <td>
 <#if being.size == "large"><font size="+1"></#if>
 ${being.name}
 <#if being.size == "large"></font></#if>
 <td>${being.price} Euros
 </#list>
</table>

3. include 指令
<html>
<head>
 <title>Test page</title>
</head>
<body>
 <h1>Test page</h1>
 <p>Blah blah...
<#include "/copyright_footer.html">
</body>
</html>

4.处理不存在的变量
不论在哪里引用变量，都可以指定一个默认值来避免变量丢失这种情况，通过在变量名
后面跟着一个!和默认值。就像下面的例子，当 user 从数据模型中丢失时，模板将会将
user 的值表示为字符串”Anonymous”。（若 user 并没有丢失，那么模板就会表现
出”Anonymous”不存在一样）：
当然也可以在变量名后面通过放置??来询问 FreeMarker 一个变量是否存在。将它和 if
指令合并，那么如果 user 变量不存在的话将会忽略整个问候代码段：
关于多级访问的变量，比如 animals.python.price ，书写代码：
animals.python.price!0，仅当 animals.python 存在而仅仅最后一个子变
量 price 可能不存在（这种情况下我们假设价格是 0）。如果 animals 或者 python
不存在，那么模板处理过程将会以“未定义的变量”错误而停止。为了防止这种情况的发生，
可以这样来书写代码(animals.python.price)!0。这种情况下当 animals 或
python 不存在时表达式的结果仍然是 0。对于??也是同样用来的处理这种逻辑的：
animals.python.price??对比(animals.python.price)??来看。
